{
  "version": 3,
  "sources": ["../../../src/utils/text-are-only-spaces.ts", "../../../src/app/components/dialog.tsx", "../../../src/app/components/title.tsx", "../../../src/app/components/textarea-autosize.tsx", "../../../src/app/components/description.tsx"],
  "sourcesContent": ["export const textAreOnlySpaces = (text: string): boolean => {\n  return /^( )\\1*$/.test(text);\n};\n", "import * as Dialog from \"@radix-ui/react-dialog\";\nimport cx from \"classix\";\nimport { twix } from \"tailwindcss-radix-ui\";\n\nexport const Root = Dialog.Root;\nexport const Trigger = Dialog.Trigger;\nexport const Portal = Dialog.Portal;\nexport const Title = Dialog.Title;\n\nexport const Overlay = twix(\n  Dialog.Overlay,\n  cx(\n    \"absolute top-0 left-0 z-50 box-border grid h-full w-full place-items-center overflow-y-auto py-[40px] px-[40px]\",\n    \"radix-state-open:animate-fade-in duration-300 bg-black bg-opacity-50 backdrop-blur-md\"\n  )\n);\nexport const Content = twix(\n  Dialog.Content,\n  cx(\n    \"relative z-50 w-4/5 max-w-[1000px] rounded-md bg-white py-6 px-8 shadow-lg dark:bg-dark-300\",\n    \"duration-300 radix-state-open:animate-slide-up\"\n  )\n);\n", "import { useState } from \"react\";\nimport cx from \"classix\";\nimport { TextareaAutosize } from \"@app/components/textarea-autosize\";\nimport { textAreOnlySpaces } from \"@utils/text-are-only-spaces\";\n\nconst DEFAULT_MAX_LENGTH = 80;\n\nexport const Title = ({\n  initTitle,\n  readOnly,\n  maxLength = DEFAULT_MAX_LENGTH,\n  error,\n}: TitleProps): JSX.Element => {\n  const [title, setTitle] = useState<string>(initTitle);\n  const [isFocus, setIsFocus] = useState<boolean>(true);\n\n  const isMaxLength = title.length >= maxLength;\n  const requireError =\n    error && (title.length === 0 || textAreOnlySpaces(title));\n\n  const onFocus = () => setIsFocus(true);\n  const onBlur = () => setIsFocus(false);\n\n  const updateTitle = (newTitle: string) => {\n    if (newTitle.length > maxLength) return;\n\n    setTitle(newTitle);\n  };\n\n  return (\n    <div className=\"relative\">\n      <TextareaAutosize\n        name=\"title\"\n        value={title}\n        setValue={updateTitle}\n        placeholder=\"Write the title\"\n        readOnly={readOnly}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        textareaClassName={cx(\n          \"font-primary-black text-2xl\",\n          requireError &&\n            \"focus-visible:outline-error-main outline outline-2 outline-error-main dark:outline-error-main-dark dark:focus-visible:outline-error-main-dark\"\n        )}\n        autofocus\n      />\n      {requireError && (\n        <span className=\"ml-3 font-primary-light text-sm text-error-main dark:text-error-main-dark\">\n          {error}\n        </span>\n      )}\n      {isFocus && (\n        <span\n          className={cx(\n            \"absolute right-0 top-full font-primary-light\",\n            isMaxLength\n              ? \"text-error-main dark:text-error-main-dark\"\n              : \"text-font-light dark:text-font-light-dark\"\n          )}\n        >\n          {title.length} / {maxLength}\n        </span>\n      )}\n    </div>\n  );\n};\n\ninterface TitleProps {\n  initTitle: string;\n  readOnly?: boolean;\n  maxLength?: number;\n  error?: string;\n}\n", "import { useLayoutEffect, useState, useRef } from \"react\";\nimport cx from \"classix\";\n\nexport const TextareaAutosize = (props: TitleProps): JSX.Element => {\n  const {\n    name,\n    value,\n    setValue,\n    placeholder,\n    readOnly,\n    autofocus,\n    textareaClassName,\n    onFocus,\n    onBlur,\n  } = props;\n\n  const [textareaHeight, setTextareaHeight] = useState<number>(40);\n  const textareaRef = useRef<HTMLParagraphElement>(null);\n\n  const handleOnFocus = (e: React.FocusEvent<HTMLTextAreaElement>) => {\n    const target = e.currentTarget;\n    const length = target.value.length;\n    // Place cursor at the end of the current text\n    target.setSelectionRange(length, length);\n    if (onFocus) onFocus();\n  };\n\n  const handleTitleChange = (e: React.FormEvent<HTMLTextAreaElement>): void => {\n    const value = e.currentTarget.value;\n    setValue(value);\n  };\n\n  const valueIsNotOnlySpaces = (): boolean => {\n    return !/^( )\\1*$/.test(value);\n  };\n\n  useLayoutEffect(() => {\n    if (!textareaRef.current) return;\n\n    setTextareaHeight(textareaRef.current.scrollHeight);\n  }, [value]);\n\n  return (\n    <div className=\"relative\">\n      <textarea\n        name={name}\n        className={cx(\n          \"box-border w-full resize-none overflow-y-hidden rounded-md border-none p-3 text-font-main outline-2 hover:bg-grey-300 focus-visible:bg-white dark:bg-dark-500 dark:text-font-main-dark\",\n          textareaClassName\n        )}\n        value={value}\n        onChange={handleTitleChange}\n        placeholder={placeholder}\n        readOnly={readOnly}\n        onFocus={handleOnFocus}\n        onBlur={onBlur}\n        style={{ height: `${textareaHeight}px` }}\n        autoFocus={autofocus}\n      />\n      <p\n        ref={textareaRef}\n        className={cx(\n          \"absolute top-0 left-0 -z-10 box-border overflow-y-hidden p-3 opacity-0\",\n          textareaClassName\n        )}\n      >\n        {(valueIsNotOnlySpaces() && value) || placeholder}\n      </p>\n    </div>\n  );\n};\n\ninterface TitleProps {\n  name: string;\n  value: string;\n  setValue: (value: string) => void;\n  placeholder: string;\n  autofocus?: boolean;\n  readOnly?: boolean;\n  textareaClassName?: string;\n  onFocus?: () => void;\n  onBlur?: () => void;\n}\n", "import { useState } from \"react\";\nimport { TextareaAutosize } from \"@app/components/textarea-autosize\";\n\nexport const Description = ({\n  initDescription,\n  readOnly,\n}: DescriptionProps): JSX.Element => {\n  const [description, setDescription] = useState<string>(initDescription);\n\n  const updateDescription = (newDescription: string) => {\n    setDescription(newDescription);\n  };\n\n  return (\n    <div className=\"mt-1 [&_textarea]:font-primary-light [&_textarea]:leading-6 [&_p]:font-primary-light [&_p]:leading-6\">\n      <TextareaAutosize\n        name=\"description\"\n        value={description}\n        setValue={updateDescription}\n        placeholder=\"Add a description\"\n        readOnly={readOnly}\n      />\n    </div>\n  );\n};\n\ninterface DescriptionProps {\n  initDescription: string;\n  readOnly?: boolean;\n}\n"],
  "mappings": "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",
  "names": ["import_react", "value", "import_jsx_dev_runtime", "Title", "import_react", "import_jsx_dev_runtime"]
}
